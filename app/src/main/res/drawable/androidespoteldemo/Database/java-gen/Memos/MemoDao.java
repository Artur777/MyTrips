package Memos;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import Memos.Memo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MEMO.
*/
public class MemoDao extends AbstractDao<Memo, Long> {

    public static final String TABLENAME = "MEMO";

    /**
     * Properties of entity Memo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Address = new Property(2, String.class, "Address", false, "ADDRESS");
        public final static Property Temperature = new Property(3, String.class, "Temperature", false, "TEMPERATURE");
        public final static Property Humidity = new Property(4, String.class, "Humidity", false, "HUMIDITY");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
        public final static Property PictureThumbnail = new Property(6, byte[].class, "PictureThumbnail", false, "PICTURE_THUMBNAIL");
        public final static Property Picture = new Property(7, byte[].class, "Picture", false, "PICTURE");
    };


    public MemoDao(DaoConfig config) {
        super(config);
    }
    
    public MemoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MEMO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: Name
                "'ADDRESS' TEXT NOT NULL ," + // 2: Address
                "'TEMPERATURE' TEXT," + // 3: Temperature
                "'HUMIDITY' TEXT," + // 4: Humidity
                "'DATE' TEXT NOT NULL ," + // 5: date
                "'PICTURE_THUMBNAIL' BLOB," + // 6: PictureThumbnail
                "'PICTURE' BLOB);"); // 7: Picture
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MEMO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Memo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getAddress());
 
        String Temperature = entity.getTemperature();
        if (Temperature != null) {
            stmt.bindString(4, Temperature);
        }
 
        String Humidity = entity.getHumidity();
        if (Humidity != null) {
            stmt.bindString(5, Humidity);
        }
        stmt.bindString(6, entity.getDate());
 
        byte[] PictureThumbnail = entity.getPictureThumbnail();
        if (PictureThumbnail != null) {
            stmt.bindBlob(7, PictureThumbnail);
        }
 
        byte[] Picture = entity.getPicture();
        if (Picture != null) {
            stmt.bindBlob(8, Picture);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Memo readEntity(Cursor cursor, int offset) {
        Memo entity = new Memo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // Name
            cursor.getString(offset + 2), // Address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Temperature
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Humidity
            cursor.getString(offset + 5), // date
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // PictureThumbnail
            cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7) // Picture
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Memo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAddress(cursor.getString(offset + 2));
        entity.setTemperature(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHumidity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.getString(offset + 5));
        entity.setPictureThumbnail(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.setPicture(cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Memo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Memo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
